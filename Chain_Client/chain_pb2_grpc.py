# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chain_pb2 as chain__pb2


class HeadChainReplicaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.increment = channel.unary_unary(
                '/chain.HeadChainReplica/increment',
                request_serializer=chain__pb2.IncRequest.SerializeToString,
                response_deserializer=chain__pb2.HeadResponse.FromString,
                )


class HeadChainReplicaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def increment(self, request, context):
        """increment the given key by the value, if the key doesn't exist it will
        be created with the given value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeadChainReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'increment': grpc.unary_unary_rpc_method_handler(
                    servicer.increment,
                    request_deserializer=chain__pb2.IncRequest.FromString,
                    response_serializer=chain__pb2.HeadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chain.HeadChainReplica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HeadChainReplica(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def increment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain.HeadChainReplica/increment',
            chain__pb2.IncRequest.SerializeToString,
            chain__pb2.HeadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TailChainReplicaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/chain.TailChainReplica/get',
                request_serializer=chain__pb2.GetRequest.SerializeToString,
                response_deserializer=chain__pb2.GetResponse.FromString,
                )


class TailChainReplicaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get(self, request, context):
        """gets the current value of a key or 0 if the key does not exist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TailChainReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=chain__pb2.GetRequest.FromString,
                    response_serializer=chain__pb2.GetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chain.TailChainReplica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TailChainReplica(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain.TailChainReplica/get',
            chain__pb2.GetRequest.SerializeToString,
            chain__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReplicaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.update = channel.unary_unary(
                '/chain.Replica/update',
                request_serializer=chain__pb2.UpdateRequest.SerializeToString,
                response_deserializer=chain__pb2.UpdateResponse.FromString,
                )
        self.stateTransfer = channel.unary_unary(
                '/chain.Replica/stateTransfer',
                request_serializer=chain__pb2.StateTransferRequest.SerializeToString,
                response_deserializer=chain__pb2.StateTransferResponse.FromString,
                )
        self.ack = channel.unary_unary(
                '/chain.Replica/ack',
                request_serializer=chain__pb2.AckRequest.SerializeToString,
                response_deserializer=chain__pb2.AckResponse.FromString,
                )


class ReplicaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def update(self, request, context):
        """recieve an update (called by predecessor)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stateTransfer(self, request, context):
        """does a state transfer (called by predecessor)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ack(self, request, context):
        """ACKs an update (removes it from the sent list) (called by successor)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=chain__pb2.UpdateRequest.FromString,
                    response_serializer=chain__pb2.UpdateResponse.SerializeToString,
            ),
            'stateTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.stateTransfer,
                    request_deserializer=chain__pb2.StateTransferRequest.FromString,
                    response_serializer=chain__pb2.StateTransferResponse.SerializeToString,
            ),
            'ack': grpc.unary_unary_rpc_method_handler(
                    servicer.ack,
                    request_deserializer=chain__pb2.AckRequest.FromString,
                    response_serializer=chain__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chain.Replica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Replica(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain.Replica/update',
            chain__pb2.UpdateRequest.SerializeToString,
            chain__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stateTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain.Replica/stateTransfer',
            chain__pb2.StateTransferRequest.SerializeToString,
            chain__pb2.StateTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain.Replica/ack',
            chain__pb2.AckRequest.SerializeToString,
            chain__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
